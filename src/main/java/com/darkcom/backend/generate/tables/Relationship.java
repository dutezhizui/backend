/*
 * This file is generated by jOOQ.
 */
package com.darkcom.backend.generate.tables;


import com.darkcom.backend.generate.Test;
import com.darkcom.backend.generate.tables.records.RelationshipRecord;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Relationship extends TableImpl<RelationshipRecord> {

    private static final long serialVersionUID = -1466130774;

    /**
     * The reference instance of <code>test.t_relationship</code>
     */
    public static final Relationship T_RELATIONSHIP = new Relationship();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RelationshipRecord> getRecordType() {
        return RelationshipRecord.class;
    }

    /**
     * The column <code>test.t_relationship.id</code>.
     */
    public final TableField<RelationshipRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>test.t_relationship.group_id</code>.
     */
    public final TableField<RelationshipRecord, String> GROUP_ID = createField("group_id", org.jooq.impl.SQLDataType.VARCHAR(11), this, "");

    /**
     * The column <code>test.t_relationship.detail_id</code>.
     */
    public final TableField<RelationshipRecord, Integer> DETAIL_ID = createField("detail_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>test.t_relationship.type</code>.
     */
    public final TableField<RelationshipRecord, String> TYPE = createField("type", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>test.t_relationship.posi_id</code>.
     */
    public final TableField<RelationshipRecord, Integer> POSI_ID = createField("posi_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>test.t_relationship</code> table reference
     */
    public Relationship() {
        this(DSL.name("t_relationship"), null);
    }

    /**
     * Create an aliased <code>test.t_relationship</code> table reference
     */
    public Relationship(String alias) {
        this(DSL.name(alias), T_RELATIONSHIP);
    }

    /**
     * Create an aliased <code>test.t_relationship</code> table reference
     */
    public Relationship(Name alias) {
        this(alias, T_RELATIONSHIP);
    }

    private Relationship(Name alias, Table<RelationshipRecord> aliased) {
        this(alias, aliased, null);
    }

    private Relationship(Name alias, Table<RelationshipRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Relationship as(String alias) {
        return new Relationship(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Relationship as(Name alias) {
        return new Relationship(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Relationship rename(String name) {
        return new Relationship(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Relationship rename(Name name) {
        return new Relationship(name, null);
    }
}
