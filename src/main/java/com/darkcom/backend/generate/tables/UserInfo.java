/*
 * This file is generated by jOOQ.
 */
package com.darkcom.backend.generate.tables;


import com.darkcom.backend.generate.Keys;
import com.darkcom.backend.generate.Miniapp;
import com.darkcom.backend.generate.tables.records.UserInfoRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * 小程序用户信息
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserInfo extends TableImpl<UserInfoRecord> {

    private static final long serialVersionUID = 521061022;

    /**
     * The reference instance of <code>miniapp.t_user_info</code>
     */
    public static final UserInfo T_USER_INFO = new UserInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserInfoRecord> getRecordType() {
        return UserInfoRecord.class;
    }

    /**
     * The column <code>miniapp.t_user_info.id</code>. 自增主键
     */
    public final TableField<UserInfoRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "自增主键");

    /**
     * The column <code>miniapp.t_user_info.union_id</code>. 微信联合ID，唯一
     */
    public final TableField<UserInfoRecord, String> UNION_ID = createField("union_id", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "微信联合ID，唯一");

    /**
     * The column <code>miniapp.t_user_info.open_id</code>. 微信开放ID，当前小程序下唯一
     */
    public final TableField<UserInfoRecord, String> OPEN_ID = createField("open_id", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "微信开放ID，当前小程序下唯一");

    /**
     * The column <code>miniapp.t_user_info.phone</code>. 手机号
     */
    public final TableField<UserInfoRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR(20), this, "手机号");

    /**
     * The column <code>miniapp.t_user_info.nick_name</code>. 昵称
     */
    public final TableField<UserInfoRecord, String> NICK_NAME = createField("nick_name", org.jooq.impl.SQLDataType.VARCHAR(100), this, "昵称");

    /**
     * The column <code>miniapp.t_user_info.gender</code>. 性别
     */
    public final TableField<UserInfoRecord, String> GENDER = createField("gender", org.jooq.impl.SQLDataType.VARCHAR(10), this, "性别");

    /**
     * The column <code>miniapp.t_user_info.language</code>. 语言
     */
    public final TableField<UserInfoRecord, String> LANGUAGE = createField("language", org.jooq.impl.SQLDataType.VARCHAR(10), this, "语言");

    /**
     * The column <code>miniapp.t_user_info.city</code>. 城市
     */
    public final TableField<UserInfoRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR(100), this, "城市");

    /**
     * The column <code>miniapp.t_user_info.province</code>. 省份
     */
    public final TableField<UserInfoRecord, String> PROVINCE = createField("province", org.jooq.impl.SQLDataType.VARCHAR(50), this, "省份");

    /**
     * The column <code>miniapp.t_user_info.country</code>. 国家
     */
    public final TableField<UserInfoRecord, String> COUNTRY = createField("country", org.jooq.impl.SQLDataType.VARCHAR(100), this, "国家");

    /**
     * The column <code>miniapp.t_user_info.avatar_url</code>. 头像url
     */
    public final TableField<UserInfoRecord, String> AVATAR_URL = createField("avatar_url", org.jooq.impl.SQLDataType.VARCHAR(100), this, "头像url");

    /**
     * The column <code>miniapp.t_user_info.session_key</code>. 微信会话key
     */
    public final TableField<UserInfoRecord, String> SESSION_KEY = createField("session_key", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "微信会话key");

    /**
     * The column <code>miniapp.t_user_info.created_by</code>. 创建者
     */
    public final TableField<UserInfoRecord, String> CREATED_BY = createField("created_by", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("sys", org.jooq.impl.SQLDataType.VARCHAR)), this, "创建者");

    /**
     * The column <code>miniapp.t_user_info.create_date</code>. 创建时间
     */
    public final TableField<UserInfoRecord, LocalDateTime> CREATE_DATE = createField("create_date", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>miniapp.t_user_info.updated_by</code>. 更新人
     */
    public final TableField<UserInfoRecord, String> UPDATED_BY = createField("updated_by", org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.inline("sys", org.jooq.impl.SQLDataType.VARCHAR)), this, "更新人");

    /**
     * The column <code>miniapp.t_user_info.update_date</code>. 更新时间
     */
    public final TableField<UserInfoRecord, LocalDateTime> UPDATE_DATE = createField("update_date", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "更新时间");

    /**
     * Create a <code>miniapp.t_user_info</code> table reference
     */
    public UserInfo() {
        this(DSL.name("t_user_info"), null);
    }

    /**
     * Create an aliased <code>miniapp.t_user_info</code> table reference
     */
    public UserInfo(String alias) {
        this(DSL.name(alias), T_USER_INFO);
    }

    /**
     * Create an aliased <code>miniapp.t_user_info</code> table reference
     */
    public UserInfo(Name alias) {
        this(alias, T_USER_INFO);
    }

    private UserInfo(Name alias, Table<UserInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserInfo(Name alias, Table<UserInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("小程序用户信息"));
    }

    public <O extends Record> UserInfo(Table<O> child, ForeignKey<O, UserInfoRecord> key) {
        super(child, key, T_USER_INFO);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Miniapp.MINIAPP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserInfoRecord, Long> getIdentity() {
        return Keys.IDENTITY_T_USER_INFO;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserInfoRecord> getPrimaryKey() {
        return Keys.KEY_T_USER_INFO_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserInfoRecord>> getKeys() {
        return Arrays.<UniqueKey<UserInfoRecord>>asList(Keys.KEY_T_USER_INFO_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserInfo as(String alias) {
        return new UserInfo(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserInfo as(Name alias) {
        return new UserInfo(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInfo rename(String name) {
        return new UserInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInfo rename(Name name) {
        return new UserInfo(name, null);
    }
}
